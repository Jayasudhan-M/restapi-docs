1.Bloor Donor Management System - REST Service with Spring Boot
AIM:
ALGORITHM:
CODING:
Model
Donor.java
package com.examly.springapp.model;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
@Entity
public class Donor {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private int donorId;
 private String name;
 private int age;
 private String address;
 private String bloodGroup;
 public Donor() {
 }
 public Donor(int donorId, String name, int age, String address, String bloodGroup) {
 this.donorId = donorId;
 this.name = name;
 this.age = age;
 this.address = address;
 this.bloodGroup = bloodGroup;
 }
 public int getDonorId() {
 return donorId;
 }
 public void setDonorId(int donorId) {
 this.donorId = donorId;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public int getAge() {
 return age;
 }
 public void setAge(int age) {
 this.age = age;
 }
 public String getAddress() {
 return address;
 }
 public void setAddress(String address) {
 this.address = address;
 }
 public String getBloodGroup() {
 return bloodGroup;
 }
 public void setBloodGroup(String bloodGroup) {
 this.bloodGroup = bloodGroup;
 }
}
Repository
DonorRepo.java
package com.examly.springapp.repository;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import com.examly.springapp.model.Donor;
public interface DonorRepo extends JpaRepository<Donor,Integer> {
 Donor findByDonorId(int donorId);
 @Query("SELECT d FROM Donor d ORDER BY d.age")
 List<Donor> findByDonorId();
 @Query("SELECT d FROM Donor d ORDER BY d.bloodGroup")
 List<Donor> findByBloodGroup();
 @Query("SELECT d FROM Donor d WHERE d.age BETWEEN :minAge AND :maxAge")
 List<Donor> findByAgeRange(int minAge, int maxAge);
}
Service
DonorService.java
package com.examly.springapp.service;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.examly.springapp.model.Donor;
import com.examly.springapp.repository.DonorRepo;
@Service
public class DonorService {
 @Autowired
 private DonorRepo repo;
 public Donor addDonor(Donor donor) {
 return repo.save(donor);
 }
 public Donor getsDonor(int donorId) {
 return repo.findByDonorId(donorId);
 }
 public List<Donor> getDonor() {
 return repo.findAll();
 }
 public Donor updateDonor(int donorId,Donor donor) {
 Optional <Donor> donorExist = repo.findById(donorId);
 if(donorExist.isPresent()){
 Donor existingDonor = donorExist.get();
 existingDonor.setName(donor.getName());
 existingDonor.setAge(donor.getAge());
 existingDonor.setAddress(donor.getAddress());
 return repo.save(donor);
 }
 return new Donor();
 }
 public boolean deleteDonor(int donorId) {
 Optional<Donor> donorExist = repo.findById(donorId);
 if (donorExist.isPresent()) {
 repo.deleteById(donorId);
 System.out.println("Donor deleted Successfully");
 return true;
 } else {
 System.out.println("Donor not found");
 return false;
 }
 }
 public List<Donor> sortAge() {
 return repo.findByDonorId();
 }
 public List<Donor> sortByBloodGroup() {
 return repo.findByBloodGroup();
 }
 public List<Donor> sortByAgeRange(int minAge, int maxAge) {
 return repo.findByAgeRange(minAge,maxAge);
 }
}
Controller
DonorController.java
package com.examly.springapp.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.examly.springapp.model.Donor;
import com.examly.springapp.service.DonorService;
@RestController
public class DonorController {
 @Autowired
 private DonorService service;
 @PostMapping("/donor")
 public ResponseEntity<?>addDonor(@RequestBody Donor donor)
 {
 try {
 return new ResponseEntity<>(service.addDonor(donor),HttpStatus.CREATED);
 } catch (Exception e) {
 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
 @GetMapping("/donor/{donorId}")
 public ResponseEntity<?>getsDonor(@PathVariable int donorId){
 try {
 return new ResponseEntity<>(service.getsDonor(donorId),HttpStatus.OK);
 } catch (Exception e) {
 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
 @GetMapping("/donor")
 public ResponseEntity<?>getDonor(){
 try {
 return new ResponseEntity<>(service.getDonor(),HttpStatus.OK);
 } catch (Exception e) {
 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
 @PutMapping("/donor/{donorId}")
 public ResponseEntity<?>updateDonor(@PathVariable int donorId,@RequestBody Donor donor){
 try {
 return new ResponseEntity<>(service.updateDonor(donorId,donor),HttpStatus.OK);
 } catch (Exception e) {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @DeleteMapping("/donor/{donorId}")
 public ResponseEntity<?> deleteDonor(@PathVariable int donorId) {
 boolean deletionStatus = service.deleteDonor(donorId);
 if (deletionStatus) {
 return new ResponseEntity<>("Donor deleted Successfully",HttpStatus.OK);
 } else {
 return new ResponseEntity<>("Donor not found",HttpStatus.NOT_FOUND);
 }
 }
 @GetMapping("/donor/age/{age}")
 public ResponseEntity<?>sortByAge(){
 try {
 return new ResponseEntity<>(service.sortAge(),HttpStatus.OK);
 } catch (Exception e) {
 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
 @GetMapping("/donor/bloodGroup/{bloodGroup}")
 public ResponseEntity<?>sortByBloodGroup(){
 try {
 return new ResponseEntity<>(service.sortByBloodGroup(),HttpStatus.OK);
 } catch (Exception e) {
 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
 @GetMapping("/donor/ageRange/{minAge}/{maxAge}")
 public ResponseEntity<?>sortByAgeRange(@PathVariable int minAge,@PathVariable int maxAge){
 try {
 return new ResponseEntity<>(service.sortByAgeRange(minAge,maxAge),HttpStatus.OK);
 } catch (Exception e) {
 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
}
OUTPUT:
RESULT:
2.Student Management System - Web Application with Spring Boot
AIM:
ALGORITHM:
CODING:
Model
Student.java
package com.examly.springapp.model;
import javax.persistence.Entity;
import javax.persistence.Id;
@Entity
public class Student {
 @Id
 int id;
 String name,address,department;
 int age;
 public int getId() {
 return id;
 }
 public void setId(int id) {
 this.id = id;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getAddress() {
 return address;
 }
 public void setAddress(String address) {
 this.address = address;
 }
 public String getDepartment() {
 return department;
 }
 public void setDepartment(String department) {
 this.department = department;
 }
 public int getAge() {
 return age;
 }
 public void setAge(int age) {
 this.age = age;
 }
 public Student(int id, String name, String address, String department, int age) {
 this.id = id;
 this.name = name;
 this.address = address;
 this.department = department;
 this.age = age;
 }
 public Student() {
 }
}
Repository
StudentRepository.java
package com.examly.springapp.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import com.examly.springapp.model.Student;
public interface StudentRepository extends JpaRepository<Student,Integer>{
}
Service
StudentService.java
package com.examly.springapp.service;
import java.util.Comparator;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.examly.springapp.model.Student;
import com.examly.springapp.repository.StudentRepository;
@Service
public class StudentService {
 @Autowired
 StudentRepository sr;
 public Student create(Student s)
 {
 return sr.save(s);
 }
 public List<Student> getAll()
 {
 return sr.findAll();
 }
 public Student getbyid(int n)
 {
 return sr.findById(n).orElse(null);
 }
 public boolean updateDetails(int id,Student s)
 {
 if(this.getbyid(id)==null)
 {
 return false;
 }
 try{
 sr.save(s);
 }
 catch(Exception e)
 {
 return false;
 }
 return true;
 }
public boolean delete(int id)
 {
 if(this.getbyid(id) == null)
 {
 return false;
 }
 sr.deleteById(id);
 return true;
 }
 //sorting by name
 public List<Student> sortbyname()
 {
 List<Student> students = sr.findAll();
 students.sort(Comparator.comparing(Student::getName));
 return students;
 }
 //pagination
 public List<Student> getStudentsByAgeRange(int minAge, int maxAge) {
 List<Student> students = sr.findAll();
 students.removeIf(s -> s.getAge() < minAge || s.getAge() > maxAge);
 students.sort(Comparator.comparing(Student::getAge));
 return students;
 }
}
Controller
StudentController.java
package com.examly.springapp.controller;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.examly.springapp.model.Student;
import com.examly.springapp.service.StudentService;
@RestController
public class StudentController {
 @Autowired
 StudentService ss;
 @PostMapping("/student")
 public ResponseEntity<Student> adddata(@RequestBody Student s)
 {
 // Student obj=ss.create(s);
 try
 {
 return new ResponseEntity<>(ss.create(s),HttpStatus.CREATED);
 }
 catch(Exception e)
 {
 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
 @GetMapping("/student")
 public ResponseEntity<List<Student>> showdetails()
 {
 try{
 return new ResponseEntity<>(ss.getAll(),HttpStatus.OK);
 }
 catch(Exception e)
 {
 return new ResponseEntity<>(ss.getAll(),HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
 @GetMapping("/student/{id}")
 public ResponseEntity<Student> getById(@PathVariable int id)
 {
Student obj = ss.getbyid(id);
 if(obj!=null)
 return new ResponseEntity<>(obj,HttpStatus.OK);
 else
 return new ResponseEntity<>(obj,HttpStatus.INTERNAL_SERVER_ERROR);
 }
 @PutMapping("/student/{id}")
 public ResponseEntity<Student> putMethod(@PathVariable("id") int id,@RequestBody Student s)
 {
 if(ss.updateDetails(id,s) == true)
 {
 return new ResponseEntity<>(s,HttpStatus.OK);
 }
 return new ResponseEntity<>(null,HttpStatus.INTERNAL_SERVER_ERROR);
 }
 @DeleteMapping("/student/{id}")
 public ResponseEntity<?> delete(@PathVariable("id") int id)
 {
 if(ss.delete(id) == true)
 {
 return new ResponseEntity<>("Student deleted successfully",HttpStatus.OK);
 }

return new ResponseEntity<>("Student not found with ID: "+id,HttpStatus.INTERNAL_SERVER_ERROR);
 }
 //sorting
 @GetMapping("/student/sortedByName")
 public ResponseEntity<List<Student>> g()
 {
 List<Student> students = ss.sortbyname();
 return ResponseEntity.ok(students);
 }
 //pagination
 @GetMapping("/student/ageRange/{minAge}/{maxAge}")
 public ResponseEntity<List<Student>> getStudentsByAgeRange(@PathVariable int minAge, @PathVariable
int maxAge) {
 List<Student> students = ss.getStudentsByAgeRange(minAge, maxAge);
 return ResponseEntity.ok(students);
}
}
OUTPUT:
RESULT:
3.Employee Payroll Management System - Integrating Spring Boot and
Spring JDBC
AIM:
ALGORITHM:
CODING:
Model
Employee.java
package com.examly.springapp.model;
import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
@Entity
public class Employee
{
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private int id;
 private String name;
 private String address;
 private String phoneNumber;
 private String email;
 private String jobTitle;
 private String department;
 private double salary;
 @Temporal(TemporalType.DATE)
 private Date hireDate;
 public Employee() {
 }
 public Employee(int id, String name, String address, String phoneNumber, String email, String jobTitle,
 String department, double salary, Date hireDate) {
 this.id = id;
 this.name = name;
 this.address = address;
 this.phoneNumber = phoneNumber;
 this.email = email;
 this.jobTitle = jobTitle;
 this.department = department;
 this.salary = salary;
 this.hireDate = hireDate;
 }
 public int getId() {
 return id;
 }
 public void setId(int id) {
 this.id = id;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getAddress() {
 return address;
 }
 public void setAddress(String address) {
 this.address = address;
 }
 public String getPhoneNumber() {
 return phoneNumber;
 }
 public void setPhoneNumber(String phoneNumber) {
 this.phoneNumber = phoneNumber;
 }
 public String getEmail() {
 return email;
 }
 public void setEmail(String email) {
 this.email = email;
 }
 public String getJobTitle() {
 return jobTitle;
 }
 public void setJobTitle(String jobTitle) {
 this.jobTitle = jobTitle;
 }
 public String getDepartment() {
 return department;
 }
 public void setDepartment(String department) {
 this.department = department;
 }
 public double getSalary() {
 return salary;
 }
 public void setSalary(double salary) {
 this.salary = salary;
 }
 public Date getHireDate() {
 return hireDate;
 }
 public void setHireDate(Date hireDate) {
 this.hireDate = hireDate;
 }
}
Repository
EmployeeRepo.java
package com.examly.springapp.repository;
import java.util.Date;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import com.examly.springapp.model.Employee;
public interface EmployeeRepo extends JpaRepository<Employee,Integer>
{
 List<Employee> findByHireDate(Date hireDates);
 @Query("SELECT SUBSTRING(e.name, 1, 3) FROM Employee e")
 List<String> findFirstThreeCharactersOfAllNames();
}
Service
EmployeeService.java
package com.examly.springapp.service;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.examly.springapp.model.Employee;
import com.examly.springapp.repository.EmployeeRepo;
@Service
public class EmployeeService {
 @Autowired
 private EmployeeRepo er;
 public Employee postd(Employee emp) {
 return er.save(emp);
 }
 public List<Employee> getd() {
 return er.findAll();
 }
 public Optional<Employee> gettd(int id) {
 return er.findById(id);
 }
 public List<Employee> getttd(String hireDate) throws ParseException {
 Date hireDates = new SimpleDateFormat("yyyy-MM-dd").parse(hireDate);
 return er.findByHireDate(hireDates);
 }
 public List<String> gettttd() {
 return er.findFirstThreeCharactersOfAllNames();
 }
}
Controller
EmployeeController.java
package com.examly.springapp.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.examly.springapp.model.Employee;
import com.examly.springapp.service.EmployeeService;
@RestController
public class EmployeeController
{
 @Autowired
 private EmployeeService es;
 @PostMapping("/employee")
 public ResponseEntity<?> postd(@RequestBody Employee emp)
 {
 try
 {
 return new ResponseEntity<>(es.postd(emp),HttpStatus.CREATED);
 }catch(Exception e)
 {
 return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
 }
 }
 @GetMapping("/employee")
 public ResponseEntity<?> getd()
 {
 try
 {
 return new ResponseEntity<>(es.getd(),HttpStatus.OK);
 }catch(Exception e)
 {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @GetMapping("/employee/{id}")
 public ResponseEntity<?> gettd(@PathVariable int id)
 {
 try
 {
 return new ResponseEntity<>(es.gettd(id),HttpStatus.OK);
 }catch(Exception e)
 {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @GetMapping("/employee/hired/{hireDate}")
 public ResponseEntity<?> getttd(@PathVariable String hireDate)
 {
 try
 {
 return new ResponseEntity<>(es.getttd(hireDate),HttpStatus.OK);
 }catch(Exception e)
 {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @GetMapping("/employee/first-three-characters-of-name")
 public ResponseEntity<?> gettttd()
 {
 try
 {
 return new ResponseEntity<>(es.gettttd(),HttpStatus.OK);
 }catch(Exception e)
 {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
}
OUTPUT:
RESULT:
4.Employee Management System - Integrating Hibernate and JPA with
Spring Boot
AIM:
ALGORITHM:
CODING:
Model
Employee.java
package com.examly.springapp.model;
import javax.persistence.Entity;
import javax.persistence.Id;
@Entity
public class Employee {
 @Id
 private int id;
 private String name, designation;
 private double salary;
 public int getId() {
 return id;
 }
 public void setId(int id) {
 this.id = id;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getDesignation() {
 return designation;
 }
 public void setDesignation(String designation) {
 this.designation = designation;
 }
 public double getSalary() {
 return salary;
 }
 public void setSalary(double salary) {
 this.salary = salary;
 }
}
Repository
EmployeeRepo.java
package com.examly.springapp.repository;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import com.examly.springapp.model.Employee;
public interface EmployeeRepo extends JpaRepository<Employee,Integer>{
 List<Employee> findByName(String name);
 List<Employee> findByDesignation(String designation);
 List<Employee> findBySalaryBetween(double minSalary, double maxSalary);
}
Service
EmployeeService.java
package com.examly.springapp.service;
import java.util.*;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.examly.springapp.model.Employee;
import com.examly.springapp.repository.EmployeeRepo;
@Service
public class EmployeeService {
 @Autowired
 EmployeeRepo er;
 public Employee add(Employee ee)
 {
 return er.save(ee);
 }
 public List<Employee> getAll()
 {
 return er.findAll();
 }
 public Employee getById(int id)
 {
 return er.findById(id).orElse(null);
 }
 public Map<String, List<Employee>> groupByAttribute(String attribute) {
 List<Employee> employees = er.findAll();
 return employees.stream()
 .collect(Collectors.groupingBy(emp -> {
 switch (attribute) {
 case "name":
 return emp.getName();
 case "designation":
 return emp.getDesignation();
 // Add more cases for other attributes if needed
 default:
 return "";
 }
 }));
 }
 public List<Employee> findByAttribute(String attribute, String value) {
 switch (attribute) {
 case "name":
 return er.findByName(value);
 case "designation":
 return er.findByDesignation(value);
 default:
 return null;
 }
 }
 public List<Employee> findBySalaryRange(double minSalary, double maxSalary) {
 return er.findBySalaryBetween(minSalary, maxSalary);
 }}
Controller
EmployeeController.java
package com.examly.springapp.controller;
import java.util.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.examly.springapp.model.Employee;
import com.examly.springapp.service.EmployeeService;
@RestController
public class EmployeeController {
 @Autowired
 EmployeeService es;
 @PostMapping("/employees")
 public ResponseEntity<Employee> add(@RequestBody Employee ee)
 {
 Employee obj = es.add(ee);
 return new ResponseEntity<>(obj,HttpStatus.CREATED);
 }
 @GetMapping("/employees")
 public ResponseEntity<List<Employee>> getAll()
 {
 List<Employee> obj = es.getAll();
 return new ResponseEntity<>(obj,HttpStatus.OK);
 }
 @GetMapping("/employees/{id}")
 public ResponseEntity<Employee> getById(@PathVariable int id)
 {
 Employee obj = es.getById(id);
 return new ResponseEntity<>(obj,HttpStatus.OK);
 }
 @GetMapping("/employees/groupBy/{attribute}")
 public Map<String, List<Employee>> groupByAttribute(@PathVariable String attribute) {
 return es.groupByAttribute(attribute);
 }
 @GetMapping("/employees/findBy/{attribute}")
 public List<Employee> findByAttribute(@PathVariable String attribute, @RequestParam("value") String
value) {
 return es.findByAttribute(attribute, value);
 }
 @GetMapping("/employees/salaryRange")
 public List<Employee> findBySalaryRange(@RequestParam("minSalary") double minSalary,
 @RequestParam("maxSalary") double maxSalary) {
 return es.findBySalaryRange(minSalary, maxSalary);
 }
}
OUTPUT:
RESULT:
5.Smart Home Automation API with Device Control - Connecting Spring
Boot with database MySQL
AIM:
ALGORITHM:
CODING:
controller
Device Controller
package com.examly.springapp.controller;
import com.examly.springapp.model.Device;
import com.examly.springapp.model.User;
import com.examly.springapp.service.DeviceService;
import com.examly.springapp.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
@RestController
@RequestMapping("/devices")
public class DeviceController {
 @Autowired
 private DeviceService;
 @Autowired
 private UserService;
 @PostMapping("/user/{userId}")
 public ResponseEntity<Device> addDeviceToDevice(@PathVariable int userId, @RequestBody Device
device) {
 User = userService.getUserById(userId);
 if (user != null) {
 Device addedDevice = deviceService.addDeviceToDevice(user, device);
 return new ResponseEntity<>(addedDevice, HttpStatus.CREATED);
 } else {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 } }
 @GetMapping
 public ResponseEntity<List<Device>> getAllDevices() {
 List<Device> devices = deviceService.getAllDevices();
 return new ResponseEntity<>(devices, HttpStatus.OK);
 }
 @GetMapping("/{id}")
 public ResponseEntity<Device> getDeviceById(@PathVariable int id) {
 Device = deviceService.getDeviceById(id);
 if (device != null) {
 return new ResponseEntity<>(device, HttpStatus.OK);
 } else {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @GetMapping("/user/{userId}")
 public ResponseEntity<List<Device>> getDevicesByUserId(@PathVariable int userId) {
 List<Device> devices = deviceService.getDevicesByUserId(userId);
 if (!devices.isEmpty()) {
 return new ResponseEntity<>(devices, HttpStatus.OK);
 } else {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @PutMapping("/{id}")
 public ResponseEntity<Device> updateDevice(@PathVariable int id, @RequestBody Device deviceDetails) {
 Device updatedDevice = deviceService.updateDevice(id, deviceDetails);
 if (updatedDevice != null) {
 return new ResponseEntity<>(updatedDevice, HttpStatus.OK);
 } else {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 } }
 @PutMapping("/{id}/toggle")
 public ResponseEntity<String> toggleDeviceStatus(@PathVariable int id) {
 String result = deviceService.toggleDeviceStatus(id);
 if (result != null) {
 return new ResponseEntity<>(result, HttpStatus.OK);
 } else {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @PutMapping("/{id}/settings")
 public ResponseEntity<Device> updateDeviceSettings(@PathVariable int id, @RequestBody Device
deviceDetails) {
 Device updatedDevice = deviceService.updateDeviceSettings(id, deviceDetails);
 if (updatedDevice != null) {
 return new ResponseEntity<>(updatedDevice, HttpStatus.OK);
 } else {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @DeleteMapping("/{id}")
 public ResponseEntity<String> deleteDevice(@PathVariable int id) {
 boolean isDeleted = deviceService.deleteDevice(id);
 if (isDeleted) {
 return new ResponseEntity<>("Device deleted successfully", HttpStatus.OK);
 }
 return new ResponseEntity<>("Device not found with ID: " + id, HttpStatus.NOT_FOUND);

 }
}
UserController
package com.examly.springapp.controller;
import com.examly.springapp.model.User;
import com.examly.springapp.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
@RestController
@RequestMapping("/users")
public class UserController {
 @Autowired
 private UserService;
 @PostMapping
 public ResponseEntity<User> createUser(@RequestBody User user) {
 User createdUser = userService.createUser(user);
 return new ResponseEntity<>(createdUser, HttpStatus.CREATED);
 }
 @GetMapping
 public ResponseEntity<List<User>> getAllUsers() {
 List<User> users = userService.getAllUsers();
 return new ResponseEntity<>(users, HttpStatus.OK);
 }
 @GetMapping("/{id}")
 public ResponseEntity<User> getUserById(@PathVariable int id) {
 User user = userService.getUserById(id);
 if (user != null) {
 return new ResponseEntity<>(user, HttpStatus.OK);
 } else {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @PutMapping("/{id}")
 public ResponseEntity<User> updateUser(@PathVariable int id, @RequestBody User userDetails) {
 User updatedUser = userService.updateUser(id, userDetails);
 if (updatedUser != null) {
 return new ResponseEntity<>(updatedUser, HttpStatus.OK);
 } else {
 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
 }
 }
 @DeleteMapping("/{id}")
 public ResponseEntity<String> deleteUser(@PathVariable int id) {
 userService.deleteUser(id);
 return new ResponseEntity<>("User deleted successfully", HttpStatus.OK);
 }
}
Models
Device
package com.examly.springapp.model;
import com.fasterxml.jackson.annotation.JsonIgnore;
import javax.persistence.*;
import java.util.Map;
@Entity
@Table(name = "devices")
public class Device {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private int id;
 private String name;
 private String type;
 private boolean status;
 @ElementCollection
 @CollectionTable(name = "device_settings", joinColumns = @JoinColumn(name = "device_id"))
 @MapKeyColumn(name = "setting_key")
 @Column(name = "setting_value")
 private Map<String, String> settings;
 @ManyToOne
 @JoinColumn(name = "user_id")
 @JsonIgnore
 private User user;
 public Device() {}
 public Device(String name, String type, boolean status, Map<String, String> settings, User user) {
 this.name = name;
 this.type = type;
 this.status = status;
 this.settings = settings;
 this.user = user;
 }
 public int getId() {
 return id;
 }
 public void setId(int id) {
 this.id = id;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getType() {
 return type;
 }
 public void setType(String type) {
 this.type = type;
 }
 public boolean isStatus() {
 return status;
 }
 public void setStatus(boolean status) {
 this.status = status;
 }
 public Map<String, String> getSettings() {
 return settings;
 }
 public void setSettings(Map<String, String> settings) {
 this.settings = settings;
 }
 public User getUser() {
 return user;
 }
 public void setUser(User user) {
 this.user = user;
 }
}
User
package com.examly.springapp.model;
import com.fasterxml.jackson.annotation.JsonIgnore;
import javax.persistence.*;
import java.util.List;
@Entity
@Table(name = "users")
public class User {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private int id;
 private String name;
 private String email;
 @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
 private List<Device> devices;
 public User() {}
 public User(String name, String email) {
 this.name = name;
 this.email = email;
 }
 public int getId() {
 return id;
 }
 public void setId(int id) {
 this.id = id;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getEmail() {
 return email;
 }
 public void setEmail(String email) {
 this.email = email;
 }
 public List<Device> getDevices() {
 return devices;
 }
 public void setDevices(List<Device> devices) {
 this.devices = devices;
 }
}
Repositories
DeviceRepository
package com.examly.springapp.repository;
import com.examly.springapp.model.Device;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;
public interface DeviceRepository extends JpaRepository<Device, Integer> {
 List<Device> findByUserId(int userId);
}
UserRepository
package com.examly.springapp.repository;
import com.examly.springapp.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
public interface UserRepository extends JpaRepository<User, Integer> {
}
DeviceService
package com.examly.springapp.service;
import com.examly.springapp.model.Device;
import com.examly.springapp.model.User;
import com.examly.springapp.repository.DeviceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;
@Service
public class DeviceService {
 @Autowired
 private DeviceRepository deviceRepository;
 public Device addDeviceToDevice(User user, Device device) {
 device.setUser(user);
 return deviceRepository.save(device);
 }
 public List<Device> getAllDevices() {
 return deviceRepository.findAll();
 }
 public Device getDeviceById(int id) {
 Optional<Device> deviceOptional = deviceRepository.findById(id);
 return deviceOptional.orElse(null);
 }
 public List<Device> getDevicesByUserId(int userId) {
 return deviceRepository.findByUserId(userId);
 }
 public Device updateDevice(int id, Device deviceDetails) {
 Device device = getDeviceById(id);
 if (device != null) {
 device.setName(deviceDetails.getName());
 device.setType(deviceDetails.getType());
 device.setStatus(deviceDetails.isStatus());
 device.setSettings(deviceDetails.getSettings());
 return deviceRepository.save(device);
 }
 return null;
 }
 public String toggleDeviceStatus(int id) {
 Device device = getDeviceById(id);
 if (device != null) {
 device.setStatus(!device.isStatus());
 deviceRepository.save(device);
 return "Device status toggled successfully";
 }
 return null;
 }
 public Device updateDeviceSettings(int id, Device deviceDetails) {
 Device device = getDeviceById(id);
 if (device != null) {
 device.setSettings(deviceDetails.getSettings());
 return deviceRepository.save(device);
 }
 return null;
 }
 public boolean deleteDevice(int id) {
 deviceRepository.deleteById(id);
 return false;
 }
}
UserService
package com.examly.springapp.service;
import com.examly.springapp.model.User;
import com.examly.springapp.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;
@Service
public class UserService {
 @Autowired
 private UserRepository userRepository;
 public User createUser(User user) {
 return userRepository.save(user);
 }
 public List<User> getAllUsers() {
 return userRepository.findAll();
 }
 public User getUserById(int id) {
 Optional<User> userOptional = userRepository.findById(id);
 return userOptional.orElse(null);
 }
 public User updateUser(int id, User userDetails) {
 User user = getUserById(id);
 if (user != null) {
 user.setName(userDetails.getName());
 user.setEmail(userDetails.getEmail());
 return userRepository.save(user);
 }
 return null;
 }
 public void deleteUser(int id) {
 userRepository.deleteById(id);
 }
}
OUTPUT:
RESULT:
6.News API - Application Configuration with Spring Boot
AIM:
ALGORITHM:
CODING:
Models
Article:
package com.examly.springapp.model;
import java.util.Date;
public class Article
{
 private String author;
 private String title;
 private String description;
 private String url;
 private String urlToImage;
 private Date publishedAt;
 private String content;
 private Source source;
 public Article() {
 }
 public Article(String author, String title, String description, String url, String urlToImage, Date publishedAt,
 String content, Source source) {
 this.author = author;
 this.title = title;
 this.description = description;
 this.url = url;
 this.urlToImage = urlToImage;
 this.publishedAt = publishedAt;
 this.content = content;
 this.source = source;
 }
 public String getAuthor() {
 return author;
 }
 public void setAuthor(String author) {
 this.author = author;
 }

public String getTitle() {
 return title;
 }
 public void setTitle(String title) {
 this.title = title;
 }
 public String getDescription() {
 return description;
 }
 public void setDescription(String description) {
 this.description = description;
 }
 public String getUrl() {
 return url;
 }
 public void setUrl(String url) {
 this.url = url;
 }
 public String getUrlToImage() {
 return urlToImage;
 }
 public void setUrlToImage(String urlToImage) {
 this.urlToImage = urlToImage;
 }
 public Date getPublishedAt() {
 return publishedAt;
 }
 public void setPublishedAt(Date publishedAt) {
 this.publishedAt = publishedAt;
 }
 public String getContent() {
 return content;
 }
 public void setContent(String content) {
 this.content = content;
 }
 public Source getSource() {
 return source;
 }
 public void setSource(Source source) {
 this.source = source;
 }
}
ApiReponse:
package com.examly.springapp.model;
public class ApiResponse
{
 private Article[] articles;
 public ApiResponse() {}
 public ApiResponse(Article[] articles) {
 this.articles = articles;
 }
 public Article[] getArticles() {
 return articles;
 }
 public void setArticles(Article[] articles) {
 this.articles = articles;
 }
}
Services:
NewsService:
package com.examly.springapp.service;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.examly.springapp.model.ApiResponse;
@Service
public class NewsService
{
 @Value("${newsapi.apikey}")
 private String apiKey;
 private final RestTemplate restTemplate;
 public NewsService(RestTemplate restTemplate) {
 this.restTemplate = restTemplate;
 }
 public ApiResponse getNewsBySource(String source) {
 String url = String.format("https://newsapi.org/v2/top-headlines?sources=%s&apiKey=%s", source,
apiKey);
 ResponseEntity<ApiResponse> response = restTemplate.getForEntity(url, ApiResponse.class);
 return response.getBody();
 }
 public ApiResponse getNewsByCountryAndCategory(String country, String category) {
 String url = String.format("https://newsapi.org/v2/top-headlines?country=%s&category=%s&apiKey=%s",
country, category, apiKey);
 ResponseEntity<ApiResponse> response = restTemplate.getForEntity(url, ApiResponse.class);
 return response.getBody();
 }
 public ApiResponse getNewsByCountryCategoryWithPaginationAndSort(String country, String category, int
pageNumber, int pageSize, String sortField) {
 String url = String.format("https://newsapi.org/v2/top-headlines?country=%s&category=%s&apiKey=%s",
country, category, apiKey);
 ResponseEntity<ApiResponse> response = restTemplate.getForEntity(url, ApiResponse.class);
 return response.getBody(); } }
Controllers:
NewsController:
package com.examly.springapp.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.examly.springapp.model.ApiResponse;
import com.examly.springapp.service.NewsService;
@RestController
@RequestMapping("/news")
public class NewsController
{
 @Autowired
 private NewsService newsService;
 @GetMapping("/source/{source}")
 public ResponseEntity<ApiResponse> getNewsBySource(@PathVariable String source) {
 ApiResponse apiResponse = newsService.getNewsBySource(source);
 if (apiResponse == null || apiResponse.getArticles() == null || apiResponse.getArticles().length == 0) {
 return ResponseEntity.notFound().build();
 }
 return ResponseEntity.ok(apiResponse);
 }
 @GetMapping("/country/{country}/category/{category}")
 public ResponseEntity<ApiResponse> getNewsByCountryAndCategory(@PathVariable String country,
@PathVariable String category) {
 ApiResponse apiResponse = newsService.getNewsByCountryAndCategory(country, category);
 if (apiResponse == null || apiResponse.getArticles() == null || apiResponse.getArticles().length == 0) {
 return ResponseEntity.notFound().build();
 }
 return ResponseEntity.ok(apiResponse);
 }
 @GetMapping("/country/{country}/category/{category}/{pageNumber}/{pageSize}/{sortField}")
 public ResponseEntity<ApiResponse> getNewsByCountryCategoryWithPaginationAndSort(@PathVariable
String country, @PathVariable String category, @PathVariable int pageNumber, @PathVariable int pageSize,
@PathVariable String sortField) {
 ApiResponse apiResponse = newsService.getNewsByCountryCategoryWithPaginationAndSort(country,
category, pageNumber, pageSize, sortField);
 if (apiResponse == null || apiResponse.getArticles() == null || apiResponse.getArticles().length == 0) {
 return ResponseEntity.notFound().build();
 }
 return ResponseEntity.ok(apiResponse);
 }
}
AppConfig:
package com.examly.springapp.configuration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;
@Configuration
public class AppConfig
{
 @Bean
 public RestTemplate restTemplate() {
 return new RestTemplate();
 }
}
Source:
package com.examly.springapp.model;
public class Source
{
 private String id;
 private String name;
 public Source() {
 }
 public Source(String id, String name) {
 this.id = id;
 this.name = name;
 }

public String getId() {
 return id;
 }
 public void setId(String id) {
 this.id = id;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
}
OUTPUT:
RESULT:
7. Employee Payroll Management System with Spring Boot: LIKE Queries –
Web Services
AIM:
ALGORITHM:
CODING:
Controller:
package com.examly.springapp.controller;
import com.examly.springapp.model.Employee;
import com.examly.springapp.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
@RestController
@RequestMapping("/employees")
public class EmployeeController {
 private final EmployeeService employeeService;
 @Autowired
 public EmployeeController(EmployeeService employeeService) {
 this.employeeService = employeeService;
 }
 @PostMapping
 public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee) {
 Employee createdEmployee = employeeService.createEmployee(employee);
 return new ResponseEntity<>(createdEmployee, HttpStatus.CREATED);
 }
 @GetMapping("/containing/{searchTerm}")
 public ResponseEntity<List<Employee>> getEmployeesContaining(@PathVariable String searchTerm) {
 List<Employee> employees = employeeService.getEmployeesContaining(searchTerm);
 return new ResponseEntity<>(employees, HttpStatus.OK);
 }
 @GetMapping("/startsWith/{name}")
 public ResponseEntity<List<Employee>> getEmployeesStartsWith(@PathVariable String name) {
 List<Employee> employees = employeeService.getEmployeesStartsWith(name);
 return new ResponseEntity<>(employees, HttpStatus.OK);
 }
 @GetMapping("/endsWith/{name}")
 public ResponseEntity<List<Employee>> getEmployeesEndsWith(@PathVariable String name) {

List<Employee> employees = employeeService.getEmployeesEndsWith(name);
 return new ResponseEntity<>(employees, HttpStatus.OK);
 }
 @GetMapping("/contains/{designation}")
 public ResponseEntity<List<Employee>> getEmployeesByDesignation(@PathVariable String designation) {
 List<Employee> employees = employeeService.getEmployeesByDesignation(designation);
 return new ResponseEntity<>(employees, HttpStatus.OK);
 }
 @GetMapping("/isContaining/{name}")
 public ResponseEntity<List<Employee>> getEmployeesByName(@PathVariable String name) {
 List<Employee> employees = employeeService.getEmployeesByName(name);
 return new ResponseEntity<>(employees, HttpStatus.OK);
 }
}
Model:
package com.examly.springapp.model;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
@Entity
public class Employee {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private int id;
 private String name;
 private String designation;
 public Employee() {}
 public Employee(String name, String designation) {
 this.name = name;
 this.designation = designation;
 }
 public int getId() {
 return id;
 }
 public void setId(int id) {
 this.id = id;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getDesignation() {
 return designation;
 }
 public void setDesignation(String designation) {
 this.designation = designation;
 }
}
Repository:
package com.examly.springapp.repository;
import com.examly.springapp.model.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
 List<Employee> findByNameContainingOrDesignationContaining(String name, String designation);
 List<Employee> findByNameStartingWith(String name);
 List<Employee> findByNameEndingWith(String name);
 List<Employee> findByDesignation(String designation);
 List<Employee> findByNameContaining(String name);}
Service:
package com.examly.springapp.service;
import com.examly.springapp.model.Employee;
import com.examly.springapp.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
@Service
public class EmployeeService {
 private final EmployeeRepository employeeRepository;
 @Autowired
 public EmployeeService(EmployeeRepository employeeRepository) {
 this.employeeRepository = employeeRepository;
 }
 public Employee createEmployee(Employee employee) {
 return employeeRepository.save(employee);
 }
 public List<Employee> getEmployeesContaining(String searchTerm) {
 return employeeRepository.findByNameContainingOrDesignationContaining(searchTerm, searchTerm);
 }
 public List<Employee> getEmployeesStartsWith(String name) {
 return employeeRepository.findByNameStartingWith(name);
 }
 public List<Employee> getEmployeesEndsWith(String name) {
 return employeeRepository.findByNameEndingWith(name);
 }
 public List<Employee> getEmployeesByDesignation(String designation) {
 return employeeRepository.findByDesignation(designation);
 }
 public List<Employee> getEmployeesByName(String name) {
 return employeeRepository.findByNameContaining(name);
 }}
OUTPUT:
RESULT:
8. Employee Payroll Management System with Spring Boot: NOT LIKE
Queries – Web Services
AIM:
ALGORITHM:
CODING:
Controller:
package com.examly.springapp.controller;
import java.util.List;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.examly.springapp.model.Employee;
import com.examly.springapp.service.EmployeeService;
@RestController
@RequestMapping("/employees")
public class EmployeeController {
private final EmployeeService employeeService;
public EmployeeController(EmployeeService employeeService) { this.employeeService = employeeService;
}
@PostMapping
public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee)
{
Employee e=employeeService.saveEmployee(employee);
if(e!=null)
{
return new ResponseEntity<>(e,HttpStatus.CREATED);
}
else{
return new ResponseEntity<>(e,HttpStatus.INTERNAL_SERVER_ERROR);
}
}
@GetMapping
public List<Employee> getAllEmployees()
{
return employeeService.getAllEmployees();
}
@GetMapping("/notContaining/{name}")
public List<Employee> getEmployeesNotContainingName(@PathVariable String name)
{
return employeeService.getEmployeesNotContainingName(name);
}
@GetMapping("/notContains/{designation}")
public List<Employee> getEmployeesNotContainingDesignation(@PathVariable String designation)
{
return employeeService.getEmployeesNotContainingDesignation(designation);
}
@GetMapping("/notLike/{searchTerm}")
public List<Employee> getEmployeesNotLike(@PathVariable String searchTerm)
{
return employeeService.getEmployeesNotLike(searchTerm);
}
}
Model:
package com.examly.springapp.model;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
@Entity
public class Employee
{
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String name;
private String designation;
public Employee() {}
public Employee(String name, String designation) { this.name = name;
this.designation = designation;
}
public int getId()
{
return id;
}
public void setId(int id)
{
this.id = id;
}
public String getName()
{
return name;
}
public void setName(String name)
{
this.name = name;
}
public String getDesignation()
{
return designation;
}
public void setDesignation(String designation)
{
this.designation = designation;
}
}
Repository:
package com.examly.springapp.repository;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.examly.springapp.model.Employee;
@Repository
public interface EmployeeRepo extends JpaRepository<Employee, Integer> {
List<Employee> findByNameNotContaining(String name);
List<Employee> findByDesignationNotContains(String designation);
}
Service:
package com.examly.springapp.service;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.examly.springapp.model.Employee;
import com.examly.springapp.repository.EmployeeRepo;
@Service
public class EmployeeService
{
@Autowired
EmployeeRepo employeeRepo;
public EmployeeService(EmployeeRepo employeeRepo) { this.employeeRepo = employeeRepo;
}
public Employee saveEmployee(Employee employee)
{
return employeeRepo.save(employee);
}
public List<Employee> getAllEmployees()
{
return employeeRepo.findAll();
}
public List<Employee> getEmployeesNotContainingName(String name)
{
return employeeRepo.findByNameNotContaining(name);
}
public List<Employee> getEmployeesNotContainingDesignation(String designation)
{
return employeeRepo.findByDesignationNotContains(designation);
}
public List<Employee> getEmployeesNotLike(String searchTerm)
{
return employeeRepo.findByNameNotContaining(searchTerm);
}
}
Controller:
package com.examly.springapp.controller;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.examly.springapp.model.Employee;
import com.examly.springapp.service.EmployeeService;
@RestController
@RequestMapping("/employees")
public class EmployeeController {
@Autowired
EmployeeService employeeService;
public EmployeeController(EmployeeService employeeService) { this.employeeService = employeeService;
}
@PostMapping
public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee)
{
Employee e=employeeService.saveEmployee(employee);
if(e!=null)
{
return new ResponseEntity<>(e,HttpStatus.CREATED);
}
else{
return new ResponseEntity<>(e,HttpStatus.INTERNAL_SERVER_ERROR);
}
}
@GetMapping
public List<Employee> getAllEmployees()
{
return employeeService.getAllEmployees();
}
@GetMapping("/notContaining/{name}")
public List<Employee> getEmployeesNotContainingName(@PathVariable String name)
{
return employeeService.getEmployeesNotContainingName(name);
}
@GetMapping("/notContains/{designation}")
public List<Employee> getEmployeesNotContainingDesignation(@PathVariable String designation)
{
return employeeService.getEmployeesNotContainingDesignation(designation);
}
@GetMapping("/notLike/{searchTerm}")
public List<Employee> getEmployeesNotLike(@PathVariable String searchTerm)
{
return employeeService.getEmployeesNotLike(searchTerm);
}
}
OUTPUT:
RESULT:
9. Asset Tracking System with Ownership Details - Spring Boot Project
AIM:
ALGORITHM:
CODING:
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;import
org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import javax.persistence.*;
import java.util.Optional;
@SpringBootApplication
public class AssetTrackingApplication {
public static void main(String[] args) {
SpringApplication.run(AssetTrackingApplication.class, args);
}
}
Model
@Entity
class Asset {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String name;
private String description;
private double value;
@OneToOne(mappedBy = "asset", cascade = CascadeType.ALL)
private Owner owner;
public Asset() {}
public Asset(String name, String description, double value) {
this.name = name;
this.description = description;
this.value = value;
}
// Getters and setters
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {return
name;
}
public void setName(String name) {
this.name = name;
}
public String getDescription() {
return description;
}
public void setDescription(String description) {
this.description = description;
}
public double getValue() {
return value;
}
public void setValue(double value) {
this.value = value;
}
public Owner getOwner() {
return owner;
}
public void setOwner(Owner owner) {
this.owner = owner;
}
}
@Entity
class Owner {@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String name;
private String email;
private String address;
@OneToOne
@JoinColumn(name = "asset_id")
private Asset asset;
public Owner() {}
public Owner(String name, String email, String address) {
this.name = name;
this.email = email;
this.address = address;
}
// Getters and setters
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {return
name;
}
public void setName(String name) {
this.name = name;
}
public String getEmail() {return
email;
}
public void setEmail(String email) {
this.email = email;
}
public String getAddress() {
return address;
}
public void setAddress(String address) {
this.address = address;
}
public Asset getAsset() {
return asset;
}
public void setAsset(Asset asset) {
this.asset = asset;
}
}
Repository:
@Repository
interface AssetRepository extends JpaRepository<Asset, Integer> {}
@Repository
interface OwnerRepository extends JpaRepository<Owner, Integer> {}
Controllers:
@RestController
@RequestMapping("/assets")class
AssetController {
private final AssetService assetService;
public AssetController(AssetService assetService) {
this.assetService = assetService;
}
@PostMapping
public Asset createAsset(@RequestBody Asset asset) {
return assetService.saveAsset(asset);
}
@GetMapping("/{id}")
public Asset getAssetById(@PathVariable int id) {
return assetService.getAssetById(id);
}
@PutMapping("/{id}")
public Asset updateAsset(@PathVariable int id, @RequestBody Asset
updatedAsset) {
return assetService.updateAsset(id, updatedAsset);
}
@DeleteMapping("/{id}")
public String deleteAsset(@PathVariable int id) {
return assetService.deleteAsset(id);
}
}
@RestController
@RequestMapping("/owners")
class OwnerController {
private final OwnerService ownerService;
public OwnerController(OwnerService ownerService) {
this.ownerService = ownerService;
}
@PostMapping("/asset/{assetId}")
public Owner createOwner(@PathVariable int assetId, @RequestBodyOwner
owner) {
return ownerService.saveOwner(assetId, owner);
}
@GetMapping("/{id}")
public Owner getOwnerById(@PathVariable int id) {return
ownerService.getOwnerById(id);
}
@PutMapping("/{id}")
public Owner updateOwner(@PathVariable int id, @RequestBody Owner
updatedOwner) {
return ownerService.updateOwner(id, updatedOwner);
}
@DeleteMapping("/{id}")
public String deleteOwner(@PathVariable int id) {
return ownerService.deleteOwner(id);
}
}
Service:
@Service
class AssetService {
private final AssetRepository assetRepository;
public AssetService(AssetRepository assetRepository) {this.assetRepository
= assetRepository;
}
public Asset saveAsset(Asset asset) {
return assetRepository.save(asset);
}
public Asset getAssetById(int id) {
return assetRepository.findById(id).orElse(null);
}
public Asset updateAsset(int id, Asset updatedAsset) {
Asset existingAsset = assetRepository.findById(id).orElse(null);if
(existingAsset != null) {
existingAsset.setName(updatedAsset.getName());
existingAsset.setDescription(updatedAsset.getDescription());
existingAsset.setValue(updatedAsset.getValue());
return assetRepository.save(existingAsset);
}
return null;
public String deleteAsset(int id) {
Asset existingAsset = assetRepository.findById(id).orElse(null);if
(existingAsset != null) {
assetRepository.delete(existingAsset);
return "Asset deleted successfully";
} else {
return "Asset not found with ID: " + id;
}
}
}
@Service
class OwnerService {
private final OwnerRepository ownerRepository;
private final AssetRepository assetRepository;
public OwnerService(OwnerRepository ownerRepository, AssetRepository
assetRepository) {
this.ownerRepository = ownerRepository;
this.assetRepository = assetRepository;
}
public Owner saveOwner(int assetId, Owner owner) {
Asset asset = assetRepository.findById(assetId).orElse(null);if
(asset != null) {
owner.setAsset(asset);
return ownerRepository.save(owner);
}
return null;
}
public Owner getOwnerById(int id) {
return ownerRepository.findById(id).orElse(null);
}
public Owner updateOwner(int id, Owner updatedOwner) {
Owner existingOwner = ownerRepository.findById(id).orElse(null);if
(existingOwner != null) {
existingOwner.setName(updatedOwner.getName());
existingOwner.setEmail(updatedOwner.getEmail());
existingOwner.setAddress(updatedOwner.getAddress());
return ownerRepository.save(existingOwner);
}
return null;
}
public String deleteOwner(int id) {
Owner existingOwner = ownerRepository.findById(id).orElse(null);if
(existingOwner != null) {
ownerRepository.delete(existingOwner);return
"Owner deleted successfully";
} else {
return "Owner not found with ID: " + id;
}
}
OUTPUT:
RESULT:
10. Personal Finance Management System - Implementing AOP with Spring
Boot and AspectJ
AIM:
ALGORITHM:
CODING:
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;import
org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import javax.persistence.*;
import java.util.List;
@SpringBootApplication
public class PersonalFinanceApplication {
public static void main(String[] args) {
SpringApplication.run(PersonalFinanceApplication.class, args);
}
}
Models
@Entity
class User {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String username;
private String email;
@OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
private List<Transaction> transactions;
public User() {}
public User(String username, String email) {
this.username = username;
this.email = email;
}
// Getters and setters
public int getId() {
return id;}
public void setId(int id) {
this.id = id;
}
public String getUsername() {
return username;
}
public void setUsername(String username) {
this.username = username;
}
public String getEmail() {return
email;
}
public void setEmail(String email) {
this.email = email;
}
public List<Transaction> getTransactions() {return
transactions;
}
public void setTransactions(List<Transaction> transactions) {
this.transactions = transactions;
}
}
@Entity
class Transaction {@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String type; private
double amount; private
String description;
@ManyToOne @JoinColumn(name
= "user_id")private User user;
public Transaction() {}
public Transaction(String type, double amount, String description) {this.type
= type;
this.amount = amount;
this.description = description;
}
// Getters and setters
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getType() {
return type;
}
public void setType(String type) {
this.type = type;
}
public double getAmount() {
return amount;
}
public void setAmount(double amount) {
this.amount = amount;
}
public String getDescription() {
return description;
}
public void setDescription(String description) {
this.description = description;
}
public User getUser() {
return user;
}
public void setUser(User user) {
this.user = user;
}
}
Repository
@Repository
interface UserRepository extends JpaRepository<User, Integer> {}
@Repository
interface TransactionRepository extends JpaRepository<Transaction, Integer>
{}
@RestController
@RequestMapping("/users")
class UserController {
private final UserService userService;
public UserController(UserService userService) {
this.userService = userService;
}
@PostMapping
public User createUser(@RequestBody User user) {
return userService.saveUser(user);
}
@GetMapping("/{id}")
public User getUserById(@PathVariable int id) {
return userService.getUserById(id);
}
@PutMapping("/{id}")
public User updateUser(@PathVariable int id, @RequestBody User
updatedUser) {
return userService.updateUser(id, updatedUser);
}
@DeleteMapping("/{id}")
public String deleteUser(@PathVariable int id) {return
userService.deleteUser(id);
}
}
Controller:
@RestController
@RequestMapping("/transactions") class
TransactionController {
private final TransactionService transactionService;
public TransactionController(TransactionService transactionService) {
this.transactionService = transactionService;
}
@PostMapping("/user/{userId}")
public Transaction createTransaction(@PathVariable int userId,
@RequestBody Transaction transaction) {
return transactionService.saveTransaction(userId, transaction);
}
@GetMapping("/{id}")
public Transaction getTransactionById(@PathVariable int id) {return
transactionService.getTransactionById(id);
}
@GetMapping("/user/{userId}")
public List<Transaction> getTransactionsByUserId(@PathVariable intuserId)
{
return transactionService.getTransactionsByUserId(userId);
}
@PutMapping("/{id}")
public Transaction updateTransaction(@PathVariable int id, @RequestBody
Transaction updatedTransaction) {
return transactionService.updateTransaction(id, updatedTransaction);
}
@DeleteMapping("/{id}")
public String deleteTransaction(@PathVariable int id) {
return transactionService.deleteTransaction(id);
}
}
Service:
@Service
class UserService {
private final UserRepository userRepository;
public UserService(UserRepository userRepository) {
this.userRepository = userRepository;
}
public User saveUser(User user) {
return userRepository.save(user);
}
public User getUserById(int id) {
return userRepository.findById(id).orElse(null);
}
public User updateUser(int id, User updatedUser) {
User existingUser = userRepository.findById(id).orElse(null);if
(existingUser != null) {
existingUser.setUsername(updatedUser.getUsername());
existingUser.setEmail(updatedUser.getEmail());
return userRepository.save(existingUser);
}
return null;
}
public String deleteUser(int id) {
User existingUser = userRepository.findById(id).orElse(null);if
(existingUser != null) {
userRepository.delete(existingUser);
return "User deleted successfully";
} else {
return "User not found with ID: " + id;
}
}
}
@Service
class TransactionService {
private final UserRepository userRepository;
private final TransactionRepository transactionRepository;
public TransactionService(UserRepository userRepository,
TransactionRepository transactionRepository) {
this.userRepository = userRepository;
this.transactionRepository = transactionRepository;
}
public Transaction saveTransaction(int userId, Transaction transaction) {User
user = userRepository.findById(userId).orElse(null);
if (user != null) {
transaction.setUser(user);
return transactionRepository.save(transaction);
}
return null;
}
public Transaction getTransactionById(int id) {
return transactionRepository.findById(id).orElse(null);
}
public List<Transaction> getTransactionsByUserId(int userId) {User
user = userRepository.findById(userId).orElse(null);
if (user != null) {
return user.getTransactions();
}
return null;
}
public Transaction updateTransaction(int id, TransactionupdatedTransaction)
{
Transaction existingTransaction =
transactionRepository.findById(id).orElse(null);
if (existingTransaction != null) {
existingTransaction.setType(updatedTransaction.getType());
existingTransaction.setAmount(updatedTransaction.getAmount());
existingTransaction.setDescription(updatedTransaction.getDescription()); return
transactionRepository.save(existingTransaction);
}
return null;
}
public String deleteTransaction(int id) {
Transaction existingTransaction =
transactionRepository.findById(id).orElse(null);
if (existingTransaction != null) {
transactionRepository.delete(existingTransaction);
return "Transaction deleted successfully";
} else {
return "Transaction not found with ID: " + id;
}
}
}
OUTPUT:
RESULT:
11. Library Membership Management API - Spring Boot Application
Configuration
AIM:
ALGORITHM:
CODING:
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;import
org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import javax.persistence.*;
import java.time.LocalDate;import
java.util.List;
@SpringBootApplication
public class LibraryMembershipApplication {
public static void main(String[] args) {
SpringApplication.run(LibraryMembershipApplication.class, args);
}
}
Model
@Entity
class Member {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String name;
private String email;
@OneToOne(mappedBy = "member", cascade = CascadeType.ALL)private
MembershipCard membershipCard;
public Member() {}
public Member(String name, String email) {
this.name = name;
this.email = email;
}
// Getters and setters
public int getId() {
return id;}
public void setId(int id) {
this.id = id;
}
public String getName() {return
name;
}
public void setName(String name) {
this.name = name;
}
public String getEmail() {return
email;
}
public void setEmail(String email) {
this.email = email;
}
public MembershipCard getMembershipCard() {return
membershipCard;
}
public void setMembershipCard(MembershipCard membershipCard) {
this.membershipCard = membershipCard;
}
}
@Entity
class MembershipCard {@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String cardNumber; private
LocalDate expirationDate;
@OneToOne
@JoinColumn(name = "member_id")
private Member member;
public MembershipCard() {}
public MembershipCard(String cardNumber, LocalDate expirationDate) {
this.cardNumber = cardNumber;
this.expirationDate = expirationDate;
}
// Getters and setters
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getCardNumber() {
return cardNumber;
}
public void setCardNumber(String cardNumber) {
this.cardNumber = cardNumber;
}
public LocalDate getExpirationDate() {
return expirationDate;
}
public void setExpirationDate(LocalDate expirationDate) {
this.expirationDate = expirationDate;
}
public Member getMember() {
return member;
}
public void setMember(Member member) {
this.member = member;
}
}
Repository:
@Repository
interface MemberRepo extends JpaRepository<Member, Integer> {}
@Repository
interface MembershipRepo extends JpaRepository<MembershipCard, Integer>
{}
@RestController
@RequestMapping("/members")
class MemberController {
private final MemberService memberService;
public MemberController(MemberService memberService) {
this.memberService = memberService;
}
@PostMapping
public Member createMember(@RequestBody Member member) {return
memberService.saveMember(member);
}
@GetMapping("/{id}")
public Member getMemberById(@PathVariable int id) {return
memberService.getMemberById(id);
}
@GetMapping
public List<Member> getAllMembers() {
return memberService.getAllMembers();
}
@PutMapping("/{id}")
public Member updateMember(@PathVariable int id, @RequestBody
Member updatedMember) {
return memberService.updateMember(id, updatedMember);
}
@DeleteMapping("/{id}")
public String deleteMember(@PathVariable int id) {
return memberService.deleteMember(id);
}
}
Controller:
@RestController
@RequestMapping("/membership-cards")
class MembershipCardController {
private final MembershipService membershipService;
public MembershipCardController(MembershipService membershipService)
{
this.membershipService = membershipService;
}
@PostMapping("/member/{id}")
public MembershipCard createMembershipCard(@PathVariable int id,
@RequestBody MembershipCard membershipCard) {
return membershipService.saveMembershipCard(id, membershipCard);
}
@GetMapping("/{id}")
public MembershipCard getMembershipCardById(@PathVariable int id) {return
membershipService.getMembershipCardById(id);
}
@PutMapping("/{id}")
public MembershipCard updateMembershipCard(@PathVariable int id,
@RequestBody MembershipCard updatedMembershipCard) {
return membershipService.updateMembershipCard(id,
updatedMembershipCard);
}
@DeleteMapping("/{id}")
public String deleteMembershipCard(@PathVariable int id) {
return membershipService.deleteMembershipCard(id);
}
}
Service:
@Service
class MemberService {
private final MemberRepo memberRepo;
public MemberService(MemberRepo memberRepo) {
this.memberRepo = memberRepo;
}
public Member saveMember(Member member) {
return memberRepo.save(member);
}
public Member getMemberById(int id) {
return memberRepo.findById(id).orElse(null);
}
public List<Member> getAllMembers() {
return memberRepo.findAll();
}
public Member updateMember(int id, Member updatedMember) { Member
existingMember = memberRepo.findById(id).orElse(null);if
(existingMember != null) {
existingMember.setName(updatedMember.getName());
existingMember.setEmail(updatedMember.getEmail());
return memberRepo.save(existingMember);
}
return null;
}
public String deleteMember(int id) {
Member existingMember = memberRepo.findById(id).orElse(null);if
(existingMember != null) {
memberRepo.delete(existingMember); return
"The Member Deleted Successfully";
} else {
return "Member Not Found";
}
}
}
@Service
class MembershipService {
private final MemberRepo memberRepo;
private final MembershipRepo membershipRepo;
public MembershipService(MemberRepo memberRepo, MembershipRepo
membershipRepo) {
this.memberRepo = memberRepo;
this.membershipRepo = membershipRepo;
}
public MembershipCard saveMembershipCard(int memberId,
MembershipCard membershipCard) {
Member member = memberRepo.findById(memberId).orElse(null);if
(member != null) {
membershipCard.setMember(member);
return membershipRepo.save(membershipCard);}
return null;}
public MembershipCard getMembershipCardById(int id) {return
membershipRepo.findById(id).orElse(null);
}
public MembershipCard updateMembershipCard(int id, MembershipCard
updatedMembershipCard) {
MembershipCard existingMembershipCard =
membershipRepo.findById(id).orElse(null);
if (existingMembershipCard != null) {
existingMembershipCard.setCardNumber(updatedMembershipCard.getCardN
umber());
existingMembershipCard.setExpirationDate(updatedMembershipCard.getExpir
ationDate());
return membershipRepo.save(existingMembershipCard);
}
return null;
}
public String deleteMembershipCard(int id) {
MembershipCard existingMembershipCard =
membershipRepo.findById(id).orElse(null);
if (existingMembershipCard != null) {
membershipRepo.delete(existingMembershipCard);
return "Membership Card Deleted Successfully";
} else {
return "Not Found";
}
}
}
OUTPUT:
RESULT: